dwindle {
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # You probably want this
}

# See https://wiki.hypr.land/Configuring/Master-Layout/ for more

############
## Master ##
############

# The master layout makes one (or more) window(s) be the “master”, taking (by default) the left part of the screen, and tiles the rest on the right. You can change the orientation on a per-workspace basis if you want to use anything other than the default left/right split.



# -- Config -- #

master {
   
    # enable adding addition master windows in a horizpontal split stile true / false
    allow_small_split = true
    
    # sets the scale of special windows, (special windows are good, look into them . . .)
    # special_scale_factor = 0.8
    
    mfact = 0.5
    
    # status of new window spawn: master: slave: inherit (adopts the status of focused window)
    new_status = slave
    
    # new window should be on top of stack, true / false
    # new_on_top = false
    
    new_on_active = before

    # default placement of the master area, can be left, right, top, bottom or center
    orientation = center

    # inherit fullscreen status when cycling/swapping to another window true / false
    inherit_fullscreen = false

    # when using orientation=center, make the master window centered only when at least this many slave windows are open. (Set 0 to always_center_master)
    slave_count_for_center_master = 3

    # postion of master window when there are less slaves than indicated in the above setting
    center_master_fallback = left
    # if enabled, resizing direction will be determined by the mouse’s position on the window (nearest to which corner). Else, it is based on the window’s tiling position.
    # smart_resizing = true

    # when enabled, dragging and dropping windows will put them at the cursor position. Otherwise, when dropped at the stack side, they will go to the top/bottom of the stack depending on new_on_top.
    drop_at_cursor = true

    # whether to keep the master window in its configured position when there are no slave windows
    # always_keep_position = true
}

# -- Binds -- #

# Swap focused window with master*, if master focused then swaps with first slave
# options: master, child auto, ignore master
# bind = $mainMod SHIFT, Return, layoutmsg, swapwithmaster master
bind = alt, M, layoutmsg, focusmaster master


bind = $mainMod ALT, M, submap, master_submap
# bind = $mainMod ALT, M, exec, notify-send "Supmap (Master) active"

# Start the 'resize' submap definition
submap = master_submap

# Define binds within the 'resize' submap for resizing windows
# 'binde' allows for repeatable binds when held

# trying to conform n to focus next, shift + n to swap with next windownext
# swap focus to next and previous windows
bind = , n, layoutmsg, cyclenext
bind = , p, layoutmsg, cycleprev

# swap focused window with next and previous windows
bind = SHIFT, n, layoutmsg, swapnext
bind = SHIFT, p, layoutmsg, swapprev

bind = , a, layoutmsg, addmaster
bind = , r, layoutmsg, removemaster

bind = , l, layoutmsg, orientaionleft
bind = , r, layoutmsg, orientaionright
bind = , t, layoutmsg, orientaiontop
bind = , b, layoutmsg, norientaionbottom
bind = , up, layoutmsg, mfact +0.1
bind = SHIFT, up, layoutmsg, mfact +0.01
bind = , down, layoutmsg, mfact -0.1
bind = SHIFT, down, layoutmsg, mfact -0.01
bind = $mainMod, print, exec, grim -g "$(slurp)" - | swappy -f - -o -

# Define a bind to exit the 'resize' submap and return to the global submap
bind = , escape, submap, reset

# End the 'resize' submap definition and return to the global submap
submap = reset
